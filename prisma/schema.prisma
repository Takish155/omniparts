generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String          @unique
  emailVerified  DateTime?
  hashedPassword String?
  image          String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  username       String?         @unique
  role           String          @default("user")
  preferedLang   String          @default("en")
  accounts       Account[]
  Authenticator  Authenticator[]
  reviews        ProductReview[]
  sessions       Session[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Product {
  id               String                 @id @default(cuid())
  productName      String
  productImage     String
  productPrice     Float
  productDetails   String
  productDetailsJA String?
  productCategory  String
  productBrand     String
  year             Float
  currentStock     Float
  slug             String?                @unique
  reviews          ProductReview[]
  specifications   ProductSpecification[]
}

model Order {
  id                    String           @id @default(cuid())
  email                 String
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  status                String           @default("payment_received")
  trackingUrl           String?
  estimatedDeliveryTime DateTime
  fullName              String
  postalCode            String
  prefecture            String
  addressLine1          String
  addressLine2          String
  orderedProducts       OrderedProduct[]
}

model OrderedProduct {
  id          String   @id @default(cuid())
  orderId     String
  productName String
  price       Int      @default(0)
  quantity    Int
  image       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model ProductSpecification {
  id            String  @id @default(cuid())
  productId     String
  specification String
  value         String
  product       Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ProductReview {
  id        String   @id @default(cuid())
  productId String
  userId    String
  review    String
  rating    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  slug      String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
